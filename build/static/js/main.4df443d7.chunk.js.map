{"version":3,"sources":["components/NavBar.js","components/WordCount.js","components/PageCount.js","components/Thresholds.js","components/TotalTime.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","settings","notifs","setState","set","notif","settingsBtn","react_default","a","createElement","id","className","onClick","setClicked","bind","autoFocus","notificationsBtn","notifsClicked","React","Component","WordCount","getInputValue","e","parentCallback","target","value","htmlFor","type","title","min","step","onChange","PageCount","window","Swal","Thresholds","setRoadblock","setInterval","checkRoadblock","setCompletion","checkCompletion","sendThr","sendML","form","document","getElementById","reportValidity","axios","post","wordCount","pageCount","then","res","console","log","data","fire","toFixed","text","icon","confirmButtonColor","cancelButtonColor","confirmButtonText","get","handleCallbackOne","childData","handleCallbackTwo","isRoadblock","isCompletion","open","n","supported","show","event","close","tag","_this2","showRoadblockNotifications","catch","error","Promise","reject","_this3","showCompNotifications","_this4","build_default","onRef","ref","body","timeout","handleRoadClick","handleCompClick","Button","aria-controls","aria-expanded","Collapse","in","components_WordCount","components_PageCount","App","components_NavBar","components_Thresholds","reportWebVitals","onPerfEntry","Function","__webpack_require__","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.4df443d7.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport * as mdb from 'mdb-ui-kit'; // lib\nimport { counter } from 'mdb-ui-kit'; // module\n\nclass NavBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            settings: true,\n            notifs: false\n        };\n    }\n    setClicked() {\n        this.setState({\n            settings: true,\n            notifs: false\n        })\n    }\n    notifsClicked() {\n        this.setState({\n            settings: false,\n            notifs: true\n        })\n    }\n    render() {\n\n        let set = this.state.settings ? \"green\" : \"white\";\n        let notif = this.state.notifs ? \"green\" : \"white\";\n        let settingsBtn = <button id=\"Settings\" className={set} onClick={this.setClicked.bind(this)} autoFocus >Settings</button>;\n        let notificationsBtn = <button id=\"Notifications\" className={notif} onClick={this.notifsClicked.bind(this)}>\n           \n            Notifications</button>;\n        return (\n            <section className='NavWrap'>\n                {settingsBtn}\n                {notificationsBtn}\n                { /* <span className=\"counter counter-lg\">9</span> */ }\n            </section>\n        )\n    }\n}\n\nexport default NavBar","import React, { useState } from 'react'\nimport NumericInput from 'react-numeric-input'\n\nclass WordCount extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    // onChange(e) {\n    //     this.setState({\n    //         value: e.target.value\n    //     })\n    // }\n    getInputValue = (e) =>{\n        this.props.parentCallback(e.target.value);\n    };\n    render() {\n        return (\n            <div className=\"form-group wordCountSection\">\n                <label htmlFor=\"\" className='wordCountTitle'>Word Count Threshold</label>\n                <br/>\n                <label htmlFor=\"\" className='wordCount'>How many total words you want to write</label>\n                <input type=\"number\"\n                    title=\"Rate\"\n                    id=\"wordCount\"\n                    className=\"form-control\"\n                    min=\"0\"\n                    step=\"1\"\n                    onChange={this.getInputValue}\n                />\n                {/* <NumericInput className=\"form-control\"\n                    value={0}\n                    min={0}\n                    step={1}\n                    precision={0} /> */}\n            </div>\n\n        )\n    }\n}\nexport default WordCount","import React, { useState } from 'react'\nimport NumericInput from 'react-numeric-input'\n\nclass PageCount extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    // onChange(e) {\n    //     this.setState({\n    //         value: e.target.value\n    //     })\n    // }\n    getInputValue = (e) =>{\n        this.props.parentCallback(e.target.value);\n    };\n    render() {\n        return (\n            <div className=\"form-group pageCountSection\">\n                <label htmlFor=\"\" className='pageCountTitle'>Page Count Threshold</label>\n                <br/>\n                <label htmlFor=\"\" className='pageCount'>How many total pages you want to write</label>\n                <input type=\"number\"\n                    title=\"Rate\"\n                    id=\"pageCount\"\n                    className=\"form-control\"\n                    min=\"0\"\n                    step=\"1\"\n                    onChange={this.getInputValue}\n                />\n                {/* <NumericInput className=\"form-control\"\n                    value={0}\n                    min={0}\n                    step={1}\n                    precision={0} /> */}\n            </div>\n\n        )\n    }\n}\nexport default PageCount","import React, { useState } from 'react';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Button from 'react-bootstrap/Button';\nimport WordCount from './WordCount';\nimport PageCount from './PageCount';\nimport axios from 'axios';\nimport reportValidity from 'report-validity'\nimport ReactNotifications from 'react-browser-notifications';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport Swal from 'sweetalert2';\nwindow.Swal = Swal;\n\nclass Thresholds extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isRoadblock: false,\n            isCompletion: false,\n            wordCount: 0,\n            pageCount: 0,\n            open: false,\n        };\n    }\n\n    setRoadblock = () => {\n        setInterval(this.checkRoadblock()\n            , 1000)\n    }\n\n    setCompletion = () => {\n        setInterval(this.checkCompletion()\n            , 5000)\n    }\n\n    showRoadblockNotifications() {\n        console.log(this.n.supported())\n        if (this.n.supported()) {console.log('here'); \n        this.n.show();}\n    }\n\n    showCompNotifications() {\n        console.log(this.a.supported())\n        if (this.a.supported()) this.a.show();\n    }\n\n    handleRoadClick(event) {\n        this.n.close(event.target.tag);\n    }\n    handleCompClick(event) {\n        this.a.close(event.target.tag);\n    }\n\n    sendThr = (() => {\n        setInterval(() => {\n            this.checkRoadblock()\n        }, 1000);\n        // do this every 5 min\n        setInterval(() => {\n            this.sendML()\n        }, 300000);\n\n        let form = document.getElementById('thresholdsBtn');\n        let res = form.reportValidity(form);\n        // let res = reportValidity(form);\n        if (res) {\n            axios.post(\"http://127.0.0.1:3001/api/thr/\", { wordCount: this.state.wordCount,\n                                                            pageCount: this.state.pageCount })\n                .then(res => {\n                    console.log(res);\n                    console.log(res.data['wordcount']);\n                    /*\n                    if (!res.ok) {\n                        Swal.fire(\n                            'Unsuccessful',\n                            'Unable to delete selected user. Please contact administrator.',\n                            'error'\n                        );\n                        return;\n                    }\n                    */\n                    Swal.fire({\n                        title: 'We expect you to take ' + (res.data['wordcount']/60).toFixed(2) + ' minutes',\n                        text: \"\",\n                        icon: 'OK',\n                        confirmButtonColor: '#3085d6',\n                        cancelButtonColor: '#d33',\n                        confirmButtonText: 'OK',\n                    })\n                })\n        }\n\n        setInterval(() => {\n            this.checkCompletion()\n        }, 5000);\n    })\n\n    sendML = (() => {\n        axios.get(\"http://127.0.0.1:3001/api/ml/\")\n    })\n\n    checkRoadblock() {\n        axios.get(\"http://127.0.0.1:3001/api/roadblock/\")\n            .then(res => {\n                if (res.data[0] == 'True') {\n                    console.log(\"roadblock notifs\");\n                    // this.roadblock_notif();\n                    this.showRoadblockNotifications();\n                    this.state.isRoadblock = true;\n                }\n                // need to then set back to false!\n                // console.log(res);\n                // console.log(res.data);\n            }).catch (\n                function (error) {\n                    console.log('Show error notification! ' + error)\n                    return Promise.reject(error)\n                 }\n            )\n        }\n\n    checkCompletion() {\n        axios.get(\"http://127.0.0.1:3001/api/completion/\")\n            .then(res => {\n                if (res.data[0] == 'True') {\n                    console.log(\"completion notifs\");\n                    // this.completion_notif();\n                    this.showCompNotifications();\n                    this.state.isCompletion = true;\n                }\n                // console.log(res);\n                // console.log(res.data);\n            }).catch (\n                function (error) {\n                    console.log('Show error notification! ' + error)\n                    return Promise.reject(error)\n                }\n            )\n    }\n\n    handleCallbackOne = (childData) =>{\n        console.log(childData);\n        // this.setState({LineSpace: childData})\n        this.state.wordCount = childData;\n    }\n\n    handleCallbackTwo = (childData) =>{\n        console.log(childData);\n        // this.setState({LineSpace: childData})\n        \n        this.state.pageCount = childData;\n    }\n\n    /*\n    // chrome notifs\n    roadblock_notif() {\n        console.log(\"made roadblock notif\");\n        chrome.notifications.create('roadblock', {\n            type: 'basic',\n            iconUrl: 'src/components/sad_whale.jpg',\n            title: 'roadblock',\n            message: 'You have approached a roadblock!',\n            priority: 2\n        })\n    }\n    // chrome notifs\n    completion_notif() {\n        console.log(\"made completion notif\");\n        chrome.notifications.create('completion', {\n            type: 'basic',\n            iconUrl: 'src/components/happy_whale.jpg',\n            title: 'completion',\n            message: 'You have completed your goal!',\n            priority: 2\n        })\n    }\n    */\n\n    // completion_img = 'src/components/happy_whale.jpg';\n    // completion_text = `You have completed your goal!`;\n    // completion_notification = new Notification('Completion', { body: `You have completed your goal!`, icon: 'src/components/happy_whale.png' });\n    \n    // roadblock_img = 'src/components/sad_whale.jpg';\n    // roadblock_text = `You have approached a roadblock!`;\n    // roadblock_notification = new Notification('Roadblock', { body: `You have approached a roadblock!`, icon: 'src/components/sad_whale.png' });\n\n    // const [open, setOpen] = useState(false);\n    render() {\n        return (\n            <div className='thresholdsList'>\n                <ReactNotifications\n                    onRef={ref => (this.n = ref)} \n                        title=\"You have approached a roadblock!\"\n                        body=\"You have approached a roadblock!\"\n                        tag=\"roadblock\"\n                        timeout=\"2000\"\n                    onClick={event => this.handleRoadClick(event)}\n                />\n                <ReactNotifications\n                    onRef={ref => (this.a = ref)} \n                        title=\"You have completed your goal!\"\n                        body=\"You have completed your goal!\"\n                        tag=\"completion\"\n                        timeout=\"2000\"\n                    onClick={event => this.handleCompClick(event)}\n                />\n                <Button\n                    id='thresholdsBtn'\n                    onClick={() => {this.setState({open: !this.state.open})}}\n                    aria-controls=\"threshholdsList\"\n                    aria-expanded={this.state.open}\n                >\n                    Word and Page Count\n                </Button>\n                <Collapse in={this.state.open}>\n                    <div id=\"threshholdsList\">\n                        <WordCount parentCallback = {this.handleCallbackOne} />\n                        <PageCount parentCallback = {this.handleCallbackTwo}/>\n                        <button className=\"btn btn-success\" onClick={this.sendThr}>submit</button>\n                    </div>\n                </Collapse>\n            </div>)\n        }\n}\n\nexport default Thresholds","import React, { useState } from 'react'\nimport NumericInput from 'react-numeric-input'\nimport reportValidity from 'report-validity'\nimport axios from 'axios';\n\nclass TotalTime extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { Time: 0 };\n    }\n    // onChange(e) {\n    //     this.setState({\n    //         value: e.target.value\n    //     })\n    // }\n    // getInputValue = (e) =>{\n    //     this.props.parentCallback(e.target.value);\n    // };\n    getInputValue = (event) => {\n        // show the user input value to console\n        this.setState({ Time: event.target.value });\n        // console.log(userValue);\n    }\n    sendTime = (() => {\n        let form = document.getElementById('totalTimeSection');\n        let res = reportValidity(form);\n        if (res) {\n            axios.post(\"http://127.0.0.1:8080/api/time/\", { totalTime: this.state.Time })\n                .then(res => {\n                    console.log(res);\n                    console.log(res.data);\n                })\n        }\n    }\n    )\n    render() {\n        return (\n            <div>\n                <form id='totalTimeSection'>\n                    <label htmlFor=\"\" className='totalTimeTitle'>Total Estimated Time (in minutes)</label>\n                    <br />\n                    <label htmlFor=\"\" className='totalTime'>Time estimated to complete assignment</label>\n                    <input type=\"number\"\n                        title=\"Rate\"\n                        id=\"totalTime\"\n                        className=\"form-control\"\n                        min=\"0\"\n                        max=\"6000\"\n                        step=\"1\"\n                        onChange={this.getInputValue}\n                    />\n                    <button className=\"btn btn-success\" onClick={this.sendTime}>Submit</button>\n                    {/* <NumericInput className=\"form-control\"\n                    value={0}\n                    min={0}\n                    step={1}\n                    precision={0} /> */}\n                </form>\n            </div>\n\n        )\n    }\n}\nexport default TotalTime","import NavBar from \"./components/NavBar\";\n// import FontSettings from \"./components/FontSettings\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from \"react\";\nimport Thresholds from \"./components/Thresholds\";\n// import DocURL from \"./components/DocURL\";\nimport TotalTime from \"./components/TotalTime\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      { /* <TotalTime /> */ }\n      {/* <DocURL /> */}\n      {/* <FontSettings /> */}\n      <Thresholds />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}